(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{418:function(s,n,e){"use strict";e.r(n);var a=e(14),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"event-loop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[s._v("#")]),s._v(" Event Loop")]),s._v(" "),n("h2",{attrs:{id:"概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),n("p",[s._v("Event Loop即事件循环，是指浏览器或Node的一种解决javaScript单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。")]),s._v(" "),n("h2",{attrs:{id:"浏览器进程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器进程"}},[s._v("#")]),s._v(" 浏览器进程")]),s._v(" "),n("h3",{attrs:{id:"多进程架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多进程架构"}},[s._v("#")]),s._v(" 多进程架构")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("每新开一个tab页，就会新增一个独立的浏览器进程，分配相应的CPU和内存。需要注意的是不同的浏览器有不同的优化机制，例如chrome可能会将某些进程合并，所以每一个Tab标签对应一个进程并不一定是绝对的。")])]),s._v(" "),n("li",[n("p",[s._v("每一个独立的浏览器进程包括：")]),s._v(" "),n("ul",[n("li",[s._v("Browser进程（主进程）\n"),n("ul",[n("li",[s._v("负责浏览器界面显示，与用户交互，包括导航栏，书签，前进和后退")]),s._v(" "),n("li",[s._v("负责各个页面的管理，创建和销毁其他进程")]),s._v(" "),n("li",[s._v("将Renderer进程得到的内存中的Bitmap，绘制到用户界面上")]),s._v(" "),n("li",[s._v("网络资源的管理，下载等")])])]),s._v(" "),n("li",[s._v("插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建，例如flash插件。")]),s._v(" "),n("li",[s._v("GPU进程：负责处理GPU相关的任务")]),s._v(" "),n("li",[s._v("渲染进程（浏览器内核）：负责一个 tab 内关于网页呈现的所有事情，页面渲染，脚本执行，事件处理等，包括多个线程\n"),n("ul",[n("li",[s._v("GUI渲染线程：负责解析 HTML,CSS,构建 DOM 树和 RenderObject 树,布局和绘制")]),s._v(" "),n("li",[s._v("JS引擎线程：负责处理 Javascript 脚本程序，与GUI渲染线程互斥（因为GUI渲染线程和JS引擎进程互斥，所以CSS加载会阻塞页面的渲染和JS的执行，JS的执行会阻塞DOM解析和页面渲染，但js的下载不会阻塞DOM解析和渲染）")]),s._v(" "),n("li",[s._v("事件触发线程：用来控制Event loop，当对应的事件符合条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理")]),s._v(" "),n("li",[s._v("定时触发器线程：setInterval 与 setTimeout 所在线程")]),s._v(" "),n("li",[s._v("异步http请求线程：XMLHttpRequest 在连接后是通过浏览器新开一个线程请求")])])])])])]),s._v(" "),n("h2",{attrs:{id:"eventloop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventloop"}},[s._v("#")]),s._v(" EventLoop")]),s._v(" "),n("h3",{attrs:{id:"宏任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#宏任务"}},[s._v("#")]),s._v(" 宏任务：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("鼠标点击触发的事件、HTML解析、setTimeout、setInterval、网络请求都属于一个宏任务，在一个宏任务执行完成后，会在执行下一个宏任务执行之前触发浏览器的重新渲染。")])]),s._v(" "),n("li",[n("p",[s._v("script全部代码、setTimeout、setInterval、setImmediate（浏览器暂时不支持，只有IE10支持，具体可见MDN）、I/O、UI Rendering。")])]),s._v(" "),n("li",[n("p",[s._v("js引擎线程负责处理js代码的执行")])]),s._v(" "),n("li",[n("p",[s._v("事件触发线程负责管理Event loop的任务队列，会将setTimeout（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等）添加到任务队列中。")])]),s._v(" "),n("li",[n("p",[s._v("所以setTimeout会在script end之后输出，因为setTimeout属于一个新的宏任务。")])])]),s._v(" "),n("h3",{attrs:{id:"微任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微任务"}},[s._v("#")]),s._v(" 微任务：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("微任务包括mutation observer callbacks，promise callbacks，在某一个宏任务执行完后，在重新渲染与开始下一个宏任务之前，就会将在它执行期间产生的所有微任务都执行完毕。")])]),s._v(" "),n("li",[n("p",[s._v("Process.nextTick（Node独有）、Promise、Object.observe(废弃)、MutationObserver")])]),s._v(" "),n("li",[n("p",[s._v("在执行js代码时，当promise的状态变为settled，会将promise.then、promise.catch的回调添加到微任务队列中。所以promise1、promise2会在script end之后输出，但会在下一个宏任务setTimeout之前输出。")])])]),s._v(" "),n("h3",{attrs:{id:"例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[s._v("#")]),s._v(" 例子")]),s._v(" "),n("ul",[n("li",[s._v("例子1：多个eventListener，每个都是一个宏任务，按照添加顺序进行。https://codepen.io/sherrywu0917/pen/yLbXYxR?editors=1111")]),s._v(" "),n("li",[s._v("例子2：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var outer = document.querySelector('.outer');\nvar inner = document.querySelector('.inner');\n\n// 监听outer元素属性变化\nnew MutationObserver(function () {\n  console.log('mutate');\n}).observe(outer, {\n  attributes: true,\n});\n\nfunction onClick() {\n  console.log('click');\n\n  setTimeout(function () {\n    console.log('timeout');\n  }, 0);\n\n  Promise.resolve().then(function () {\n    console.log('promise');\n  });\n\n  outer.setAttribute('data-random', Math.random());\n}\n\ninner.addEventListener('click', onClick);\nouter.addEventListener('click', onClick);\n\n// 输出 click,promise,mutate,click,promise,mutate,timeout,timeout。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("h4",{attrs:{id:"event-loop执行过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-loop执行过程"}},[s._v("#")]),s._v(" Event loop执行过程")]),s._v(" "),n("ul",[n("li",[s._v("click事件首先触发inner元素的onClick事件，并且冒泡到outer元素上，将outer元素的onClick事件添加到宏任务队列中")]),s._v(" "),n("li",[s._v("执行inner元素的onClick函数，输出click")]),s._v(" "),n("li",[s._v("执行到setTimeout将其添加到宏任务队列中，此时的宏任务队列：[outer onClick, inner setTimeout]")]),s._v(" "),n("li",[s._v("执行到Promise.resolve()，将promise.then添加到微任务队列中，此时的微任务队列[inner promise.then]")]),s._v(" "),n("li",[s._v("执行到outer.setAttribute，将MutationObserver callback添加到微任务队列中，此时的微任务队列[inner promise.then, inner MutationObserver callback]")]),s._v(" "),n("li",[s._v("onClick函数代码块执行完之后，开始按顺序执行所有的微任务队列，依次输出promise，mutate")]),s._v(" "),n("li",[s._v("从宏任务队列中取出outer onClick，内部执行顺序和inner一致")]),s._v(" "),n("li",[s._v("输出click")]),s._v(" "),n("li",[s._v("把setTimeout添加到宏任务队列中，此时的宏任务队列为[inner setTimeout, outer setTimeout]")]),s._v(" "),n("li",[s._v("依次输出promise，mutate")]),s._v(" "),n("li",[s._v("从宏任务队列中取出inner setTimeout，输出setTimeout")]),s._v(" "),n("li",[s._v("从宏任务队列中取出outer setTimeout，输出setTimeout")])]),s._v(" "),n("h3",{attrs:{id:"事件冒泡、捕获"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件冒泡、捕获"}},[s._v("#")]),s._v(" 事件冒泡、捕获")]),s._v(" "),n("ul",[n("li",[s._v("冒泡：事件从最内部元素开始发生，一直向上传播，直到document对象\n"),n("ul",[n("li",[s._v("因此在事件冒泡的概念下在p元素上发生click事件的顺序应该是p -> div -> body -> html -> document")])])]),s._v(" "),n("li",[s._v("捕获：事件会从最外层开始发生，直到最具体的元素。\n"),n("ul",[n("li",[s._v("因此在事件捕获的概念下在p元素上发生click事件的顺序应该是document -> html -> body -> div -> p")])])]),s._v(" "),n("li",[s._v("addEventListener的第三个参数：默认值是false，表示在事件冒泡阶段调用事件处理函数;如果参数为true，则表示在事件捕获阶段调用处理函数。")])]),s._v(" "),n("h3",{attrs:{id:"mutationobserver"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mutationobserver"}},[s._v("#")]),s._v(" MutationObserver")]),s._v(" "),n("ul",[n("li",[s._v("MutationObserver接口提供了监视对DOM树所做更改的能力。它被设计为旧的Mutation Events功能的替代品，该功能是DOM3 Events规范的一部分。")]),s._v(" "),n("li",[s._v("MutationObserver(): 创建并返回一个新的 MutationObserver 它会在指定的DOM发生变化时被调用。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 创建一个观察器实例并传入回调函数\nconst observer = new MutationObserver(callback);\n\n// 以上述配置开始观察目标节点\nobserver.observe(targetNode, config);\n\n// 之后，可停止观察\nobserver.disconnect();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[s._v("#")]),s._v(" 数据结构")]),s._v(" "),n("ul",[n("li",[s._v("堆：完全二叉树，最大堆最小堆，线性数据结构")]),s._v(" "),n("li",[s._v("栈：后进先出，栈是只能在某一端插入和删除的特殊线性表")]),s._v(" "),n("li",[s._v("队列：先进先出。只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。")])]),s._v(" "),n("h3",{attrs:{id:"js调用栈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js调用栈"}},[s._v("#")]),s._v(" JS调用栈")]),s._v(" "),n("ul",[n("li",[s._v("后进先出")])]),s._v(" "),n("h3",{attrs:{id:"任务队列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#任务队列"}},[s._v("#")]),s._v(" 任务队列")]),s._v(" "),n("ul",[n("li",[s._v("先进先出")]),s._v(" "),n("li",[s._v("同步任务，异步任务")])]),s._v(" "),n("h3",{attrs:{id:"async-await-和-promise的执行顺序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#async-await-和-promise的执行顺序"}},[s._v("#")]),s._v(" async/await 和 Promise的执行顺序")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("console.log('script start')\n\nasync function async1() {\n  await async2()\n  console.log('async1 end')\n}\nasync function async2() {\n  console.log('async2 end') \n}\nasync1()\n\nsetTimeout(function() {\n  console.log('setTimeout')\n}, 0)\n\nnew Promise(resolve => {\n  console.log('Promise')\n  resolve()\n})\n  .then(function() {\n    console.log('promise1')\n  })\n  .then(function() {\n    console.log('promise2')\n  })\n\nconsole.log('script end')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("新版本时序：start、async2 end, Promise, script end, async1 end, promise1, promise2, setTimeout")])]),s._v(" "),n("li",[n("p",[s._v("async/await 在底层转换成了 promise 和 then 回调函数。")])]),s._v(" "),n("li",[n("p",[s._v("也就是说，这是 promise 的语法糖。")])]),s._v(" "),n("li",[n("p",[s._v("每次我们使用 await, 解释器都创建一个 promise 对象，然后把剩下的 async 函数中的操作放到 then 回调函数中。")])]),s._v(" "),n("li",[n("p",[s._v("async/await 的实现，离不开 Promise。从字面意思来理解，async 是“异步”的简写，而 await 是 async wait 的简写可以认为是等待异步方法执行完成。")])])]),s._v(" "),n("h4",{attrs:{id:"关于73以下版本和73版本的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于73以下版本和73版本的区别"}},[s._v("#")]),s._v(" 关于73以下版本和73版本的区别")]),s._v(" "),n("ul",[n("li",[s._v("在老版本版本以下，先执行promise1和promise2，再执行async1。")]),s._v(" "),n("li",[n("strong",[s._v("在73版本，先执行async1再执行promise1和promise2")])]),s._v(" "),n("li",[s._v("所以现在是async1 再 promise")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("async function f() {\n    await p;\n    console.log('async');\n}\n\n// 转换成\nfunction f() {\n    return RESOLVE(p).then(() => {\n        console.log('async');\n    });\n}\n\n\nasync await就是promise的语法糖\nfuction f() {\n  return RESOLVE(p).then(() => {\n    console.....\n  })\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h2",{attrs:{id:"nodejs-中的eventloop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-中的eventloop"}},[s._v("#")]),s._v(" NodeJS 中的EventLoop")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/")])]),s._v(" "),n("li",[n("p",[s._v("libuv: Node的跨平台抽象层，使用异步、事件驱动的编程方式。核心是提供i/o的事件循环和异步回调。libuv的API包含时间，非阻塞网络，异步文件操作，子进程等。")])]),s._v(" "),n("li",[n("p",[s._v("EventLoop：6个阶段")]),s._v(" "),n("ul",[n("li",[s._v("timers: 定时器。执行setTimeout和setInterval中到期的callback。")]),s._v(" "),n("li",[s._v("pending callbacks: 待定回调。上一轮循环中少数的callback会放在这一阶段执行。")]),s._v(" "),n("li",[s._v("idle, prepare : 仅在内部使用。")]),s._v(" "),n("li",[s._v("poll: 轮询。最重要的阶段，执行pending callback，在适当的情况下会阻塞在这个阶段。")]),s._v(" "),n("li",[s._v("check: 检测。执行setImmediate(setImmediate()是将事件插入到事件队列尾部，主线程和事件队列的函数执行完成之后立即执行setImmediate指定的回调函数)的callback。")]),s._v(" "),n("li",[s._v("close callbacks: 关闭的回调函数。执行close事件的callback，例如socket.on('close'[,fn])或者http.server.on('close, fn)。")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("       ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);