(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{421:function(s,t,a){"use strict";a.r(t);var e=a(14),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"commonjs和amd和cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commonjs和amd和cmd"}},[s._v("#")]),s._v(" CommonJS和AMD和CMD")]),s._v(" "),t("ul",[t("li",[s._v("CommonJS: 服务端模块化规范")]),s._v(" "),t("li",[s._v("AMD: 浏览器侧，前端模块化规范，异步加载")]),s._v(" "),t("li",[s._v("CMD: 浏览器侧，前端模块化规范，延迟执行，按需加载")]),s._v(" "),t("li",[s._v("require.js: js模块化管理库，遵循AMD规范")]),s._v(" "),t("li",[s._v("ES6 模块系统: ES6 标准引入的一种模块系统语法")])]),s._v(" "),t("h3",{attrs:{id:"commonjs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commonjs"}},[s._v("#")]),s._v(" CommonJS")]),s._v(" "),t("p",[s._v("应用案例：nodejs、webpack、npm"),t("br"),s._v("\n形式：require、exports、module")]),s._v(" "),t("p",[s._v("require()用来引入外部模块；exports对象用于导出当前模块的方法或变量，唯一的导出口；module对象就代表模块本身。")]),s._v(" "),t("p",[s._v("NPM了。NPM作为Node的包管理器，不是为了帮助Node解决依赖包的安装问题嘛，那它肯定也要遵循CommonJS规范啦，它遵循包规范（还是理论）的。")]),s._v(" "),t("p",[s._v("而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。但是，由于一个重大的局限，使得CommonJS规范不适用于浏览器环境。")]),s._v(" "),t("p",[s._v("浏览器不兼容CommonJS的根本原因，在于缺少四个Node.js环境的变量。")]),s._v(" "),t("p",[s._v("module\nexports\nrequire\nglobal")]),s._v(" "),t("hr"),s._v(" "),t("h3",{attrs:{id:"amd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#amd"}},[s._v("#")]),s._v(" AMD")]),s._v(" "),t("p",[s._v("应用： requirejs、curljs")]),s._v(" "),t("p",[s._v("写法：require([module], callback) 、define")]),s._v(" "),t("p",[s._v('因此，浏览器端的模块，不能采用"同步加载"（synchronous），只能采用"异步加载"（asynchronous）。这就是AMD规范诞生的背景。')]),s._v(" "),t("p",[s._v("CommonJS是主要为了JS在后端的表现制定的，他是不适合前端的，AMD(异步模块定义)出现了，它就主要为前端JS的表现制定规范。")]),s._v(" "),t("p",[s._v('AMD是"Asynchronous Module Definition"的缩写，意思就是"异步模块定义"。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。')]),s._v(" "),t("p",[s._v("AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("　　require([module], callback);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("　　require(['math'], function (math) {\n\n　　　　math.add(2, 3);\n\n　　});\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[s._v("#")]),s._v(" CMD")]),s._v(" "),t("p",[s._v("CMD（Common Module Definition）是一种 JavaScript 模块规范，它类似于 CommonJS 规范，用于在浏览器环境中实现模块化开发。")]),s._v(" "),t("p",[s._v("CMD 是由国内前端开发者玉伯提出的，主要用于解决前端开发中的模块化问题。与 CommonJS 规范不同，CMD 的特点是延迟执行和按需加载。")]),s._v(" "),t("p",[s._v("在浏览器中使用 CMD 规范的模块时，需要使用特定的加载器（如 SeaJS 或 RequireJS）来加载和解析模块。")]),s._v(" "),t("p",[s._v("CMD 规范相对于 AMD 规范和 ES6 模块语法来说，使用较少，因为在前端开发中，通常更倾向于使用 AMD 规范或 ES6 模块语法来实现模块化。")]),s._v(" "),t("p",[s._v("应用： seajs")]),s._v(" "),t("h3",{attrs:{id:"require-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#require-js"}},[s._v("#")]),s._v(" Require.js")]),s._v(" "),t("ul",[t("li",[s._v("阅读"),t("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2012/11/require_js.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Require.js"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("加载非规范的模块\nRequire.js 是一个用于管理模块依赖的 JavaScript 库，它遵循 AMD（Asynchronous Module Definition）规范。AMD 规范定义了一种异步加载模块的方式，并且支持非规范的模块加载。")])]),s._v(" "),t("p",[s._v("在 Require.js 中，非规范的模块通常是指那些没有按照 AMD 或 CommonJS 规范编写的模块，也就是没有使用 "),t("code",[s._v("define")]),s._v(" 或 "),t("code",[s._v("exports")]),s._v(" 这样的模块定义语法的模块。")]),s._v(" "),t("p",[s._v("Require.js 提供了几种方式来加载非规范的模块：")]),s._v(" "),t("ol",[t("li",[s._v("使用 "),t("code",[s._v("shim")]),s._v(" 配置：你可以通过 "),t("code",[s._v("shim")]),s._v(" 配置来告诉 Require.js 如何加载非规范的模块。在 "),t("code",[s._v("shim")]),s._v(" 中，你可以指定非规范模块的依赖关系和导出变量。例如：")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("require"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("config")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("shim")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v("'non-amd-module'")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("deps")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dependency1'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dependency2'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("exports")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'exportedVariable'")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("这样，当 Require.js 加载非规范模块时，它会先加载指定的依赖项，然后将导出的变量作为模块的返回值。")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("使用 "),t("code",[s._v("init")]),s._v(" 方法：如果非规范的模块没有导出变量，你可以使用 "),t("code",[s._v("init")]),s._v(" 方法来在模块加载完成后执行一些初始化操作。")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'non-amd-module'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 非规范模块加载完成后执行的初始化操作")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("这样，当 Require.js 加载非规范模块完成后，会执行回调函数中的代码。")]),s._v(" "),t("p",[s._v("需要注意的是，尽管 Require.js 提供了加载非规范模块的方式，但最好还是遵循 AMD 或 CommonJS 规范编写模块，以便更好地利用 Require.js 的模块管理功能。")]),s._v(" "),t("h3",{attrs:{id:"es6-模块系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块系统"}},[s._v("#")]),s._v(" ES6 模块系统")]),s._v(" "),t("p",[s._v("ES6 模块语法（也称为 ES2015 模块）是 ECMAScript 6 标准引入的一种模块系统语法，具有以下特点：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("显式导入和导出：使用 "),t("code",[s._v("import")]),s._v(" 关键字来显式地导入模块中的成员，使用 "),t("code",[s._v("export")]),s._v(" 关键字来显式地导出模块中的成员。")])]),s._v(" "),t("li",[t("p",[s._v("单一默认导出：可以使用 "),t("code",[s._v("export default")]),s._v(" 语法来导出一个默认的模块成员，一个模块只能有一个默认导出。")])]),s._v(" "),t("li",[t("p",[s._v("命名导出：可以使用 "),t("code",[s._v("export")]),s._v(" 关键字来命名导出一个或多个模块成员，每个成员都有一个名字。")])]),s._v(" "),t("li",[t("p",[s._v("静态导入和导出：ES6 模块语法在编译时进行静态分析，因此导入和导出的模块成员是静态确定的，这意味着它们不能在运行时动态改变。")])]),s._v(" "),t("li",[t("p",[s._v("编译时导入和导出：ES6 模块语法在编译时处理导入和导出，因此可以在构建过程中进行静态优化，如打包、压缩等。")])]),s._v(" "),t("li",[t("p",[s._v("循环依赖处理：ES6 模块语法可以处理循环依赖，当出现循环依赖时，可以正确地解决模块的加载顺序。")])]),s._v(" "),t("li",[t("p",[s._v("静态作用域：ES6 模块语法使用静态作用域，模块内部的变量和函数只在模块内部可见，不会污染全局作用域。")])])]),s._v(" "),t("p",[s._v("ES6 模块语法的引入使得 JavaScript 拥有了一种标准的、强大的模块系统，有助于提升代码的可维护性、可重用性和可扩展性。它已成为现代 JavaScript 开发中的常用特性，并被广泛应用于前端框架（如 React、Vue）和构建工具（如 Webpack、Rollup）中。")]),s._v(" "),t("p",[s._v("在 React 前端开发中，我们是通过构建工具和 Babel 将使用 ES6 模块语法编写的代码转换为浏览器可执行的JavaScript 语法，以确保应用能够在浏览器中运行。而不是直接将其编译为 CommonJS 或 AMD 规范的语法。")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("参考\n"),t("a",{attrs:{href:"https://www.cnblogs.com/chenguangliang/p/5856701.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("js模块化编程之彻底弄懂CommonJS和AMD/CMD！"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);