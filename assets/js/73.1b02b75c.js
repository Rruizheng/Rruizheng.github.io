(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{425:function(n,t,a){"use strict";a.r(t);var e=a(14),s=Object(e.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"js类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js类型转换"}},[n._v("#")]),n._v(" JS类型转换")]),n._v(" "),t("h3",{attrs:{id:"显式转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#显式转换"}},[n._v("#")]),n._v(" 显式转换")]),n._v(" "),t("p",[n._v("通过手动进行类型转换，Javascript提供了以下转型函数：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("转换为数值类型：Number(mix)、parseInt(string,radix)、parseFloat(string)\n转换为字符串类型：toString(radix)、String(mix)\n转换为布尔类型：Boolean(mix)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("ul",[t("li",[t("p",[n._v("1、Number(mix)函数，可以将任意类型的参数mix转换为数值类型。其规则为：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("（1）如果是布尔值，true和false分别被转换为1和0\n（2）如果是数字值，返回本身。\n（3）如果是null，返回0.\n（4）如果是undefined，返回NaN。\n（5）如果是字符串，遵循以下规则：\n        1、如果字符串中只包含数字，则将其转换为十进制（忽略前导0）\n        2、如果字符串中包含有效的浮点格式，将其转换为浮点数值（忽略前导0）\n        3、如果是空字符串，将其转换为0\n        4、如果字符串中包含非以上格式，则将其转换为NaN\n（6）如果是对象，则调用对象的valueOf()方法，然后依据前面的规则转换返回的值。如果转换的结果是NaN，则调用对象的toString()方法，再次依照前面的规则转换返回的字符串值。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])])])]),n._v(" "),t("p",[n._v("下表列出了对象的valueOf()的返回值：")]),n._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[n._v("对象")]),n._v(" "),t("th",{staticStyle:{"text-align":"left"}},[n._v("返回值")])])]),n._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Array")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("数组的元素被转换为字符串，这些字符串由逗号分隔，连接在一起。其操作与 Array.toString 和 Array.join 方法相同。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Boolean")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("Boolean 值。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Date")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Function")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("函数本身。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Number")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("数字值。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Object")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("对象本身。这是默认情况。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("String")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("字符串值。")])])])]),n._v(" "),t("p",[n._v("下面提供几个例子，你能写出它的正确结果吗：")]),n._v(" "),t("p",[n._v("Number(“hello CSSer!”);\nNumber(“0×8″);\nNumber(“”);\nNumber(“020dd”);\nNumber(“070″);\nNumber(true);")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("2、parseInt(string, radix)函数，将字符串转换为整数类型的数值。它也有一定的规则：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("（1）忽略字符串前面的空格，直至找到第一个非空字符\n（2）如果第一个字符不是数字符号或者负号，返回NaN\n（3）如果第一个字符是数字，则继续解析直至字符串解析完毕或者遇到一个非数字符号为止\n（4）如果上步解析的结果以0开头，则将其当作八进制来解析；如果以x开头，则将其当作十六进制来解析\n（5）如果指定radix参数，则以radix为基数进行解析\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("p",[n._v("小测验：\nparseInt(“hello CSSer!”);\nNumber(“0×8″);\nparseInt(“”);\nparseInt(“020dd”);\nparseInt(“070″);\nparseInt(“22.5″);")])]),n._v(" "),t("li",[t("p",[n._v("3、parseFloat(string)函数，将字符串转换为浮点数类型的数值。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("它的规则与parseInt基本相同，但也有点区别：字符串中第一个小数点符号是有效的，另外parseFloat会忽略所有前导0，如果字符串包含一个可解析为整数的数，则返回整数值而不是浮点数值。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])])]),n._v(" "),t("li",[t("p",[n._v("4、toString(radix)方法。除undefined和null之外的所有类型的值都具有toString()方法，其作用是返回对象的字符串表示。")])])]),n._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[n._v("对象")]),n._v(" "),t("th",{staticStyle:{"text-align":"left"}},[n._v("操作")])])]),n._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Array")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("将 Array 的元素转换为字符串。结果字符串由逗号分隔，且连接起来。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Boolean")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("如果 Boolean 值是 true，则返回 “true”。否则，返回 “false”。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Date")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("返回日期的文字表示法。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Error")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("返回一个包含相关错误信息的字符串。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Function")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("返回如下格式的字符串，其中 functionname 是被调用 toString 方法函数的名称：function functionname( ) { [native code] }")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("Number")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("返回数字的文字表示。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("String")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("返回 String 对象的值。")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[n._v("默认")]),n._v(" "),t("td",{staticStyle:{"text-align":"left"}},[n._v("返回 “[object objectname]”，其中 objectname 是对象类型的名称。")])])])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("5、String(mix)函数，将任何类型的值转换为字符串，其规则为：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("（1）如果有toString()方法，则调用该方法（不传递radix参数）并返回结果\n（2）如果是null，返回”null”\n（3）如果是undefined，返回”undefined”\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])])]),n._v(" "),t("li",[t("p",[n._v('6、Boolean(mix)函数，将任何类型的值转换为布尔值。\n以下值会被转换为false：false、”"、0、NaN、null、undefined，其余任何值都会被转换为true。')])])]),n._v(" "),t("h3",{attrs:{id:"隐式转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式转换"}},[n._v("#")]),n._v(" 隐式转换")]),n._v(" "),t("p",[n._v("在某些情况下，即使我们不提供显示转换，Javascript也会进行自动类型转换，主要情况有：")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("1、 用于检测是否为非数值的函数：isNaN(mix)")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    isNaN()函数，经测试发现，该函数会尝试将参数值用Number()进行转换，如果结果为“非数值”则返回true，否则返回false。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])])]),n._v(" "),t("li",[t("p",[n._v("2、递增递减操作符（包括前置和后置）、一元正负符号操作符")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    这些操作符适用于任何数据类型的值，针对不同类型的值，该操作符遵循以下规则（经过对比发现，其规则与Number()规则基本相同）：\n    （1）如果是包含有效数字字符的字符串，先将其转换为数字值（转换规则同Number()），在执行加减1的操作，字符串变量变为数值变量。\n    （2）如果是不包含有效数字字符的字符串，将变量的值设置为NaN，字符串变量变成数值变量。\n    （3）如果是布尔值false，先将其转换为0再执行加减1的操作，布尔值变量编程数值变量。\n    （4）如果是布尔值true，先将其转换为1再执行加减1的操作，布尔值变量变成数值变量。\n    （5）如果是浮点数值，执行加减1的操作。\n    （6）如果是对象，先调用对象的valueOf()方法，然后对该返回值应用前面的规则。如果结果是NaN，则调用toString()方法后再应用前面的规则。对象变量变成数值变量。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("p",[n._v('小测验：\n分别对以下类型的值执行后置递增操作，结果是什么？\n“2″, ”02dd”, ”", false, 22.5, +”", -false, +new Date()')])]),n._v(" "),t("li",[t("p",[n._v("3、 加法运算操作符\n加号运算操作符在Javascript也用于字符串连接符，所以加号操作符的规则分两种情况：\n如果两个操作值都是数值，其规则为：\n(1)如果一个操作数为NaN，则结果为NaN\n(2)如果是Infinity+Infinity，结果是Infinity\n(3)如果是-Infinity+(-Infinity)，结果是-Infinity\n(4)如果是Infinity+(-Infinity)，结果是NaN\n(5)如果是+0+(+0)，结果为+0\n(6)如果是(-0)+(-0)，结果为-0\n(7)如果是(+0)+(-0)，结果为+0\n如果有一个操作值为字符串，则：\n如果两个操作值都是字符串，则将它们拼接起来\n如果只有一个操作值为字符串，则将另外操作值转换为字符串，然后拼接起来\n如果一个操作数是对象、数值或者布尔值，则调用toString()方法取得字符串值，然后再应用前面的字符串规则。对于undefined和null，分别调用String()显式转换为字符串。\n可以看出，加法运算中，如果有一个操作值为字符串类型，则将另一个操作值转换为字符串，最后连接起来。")])]),n._v(" "),t("li",[t("p",[n._v("4、 乘除、减号运算符、取模运算符\n这些操作符针对的是运算，所以他们具有共同性：如果操作值之一不是数值，则被隐式调用Number()函数进行转换。具体每一种运算的详细规则请参考ECMAScript中的定义。")])]),n._v(" "),t("li",[t("p",[n._v("5、 逻辑操作符（!、&&、||）\n逻辑非（！）操作符首先通过Boolean()函数将它的操作值转换为布尔值，然后求反。\n一、逻辑与（&&）操作符，如果一个操作值不是布尔值时，遵循以下规则进行转换：\n（1）如果第一个操作数经Boolean()转换后为true，则返回第二个操作值，否则返回第一个值（不是Boolean()转换后的值）\n（2）如果有一个操作值为null，返回null\n（3）如果有一个操作值为NaN，返回NaN\n（4）如果有一个操作值为undefined，返回undefined\n逻辑或（||）操作符，如果一个操作值不是布尔值，遵循以下规则：\n（1）如果第一个操作值经Boolean()转换后为false，则返回第二个操作值，否则返回第一个操作值（不是Boolean()转换后的值）\n（2）对于undefined、null和NaN的处理规则与逻辑与（&&）相同")])]),n._v(" "),t("li",[t("p",[n._v("6、 关系操作符（<, >, <=, >=）\n与上述操作符一样，关系操作符的操作值也可以是任意类型的，所以使用非数值类型参与比较时也需要系统进行隐式类型转换：\n（1）如果两个操作值都是数值，则进行数值比较\n（2）如果两个操作值都是字符串，则比较字符串对应的字符编码值\n（3）如果只有一个操作值是数值，则将另一个操作值转换为数值，进行数值比较\n（4）如果一个操作数是对象，则调用valueOf()方法（如果对象没有valueOf()方法则调用toString()方法），得到的结果按照前面的规则执行比较\n（5）如果一个操作值是布尔值，则将其转换为数值，再进行比较\n注：NaN是非常特殊的值，它不和任何类型的值相等，包括它自己，同时它与任何类型的值比较大小时都返回false。")])]),n._v(" "),t("li",[t("p",[n._v("7、 相等操作符（==）\n相等操作符会对操作值进行隐式转换后进行比较：\n（1）如果一个操作值为布尔值，则在比较之前先将其转换为数值\n（2）如果一个操作值为字符串，另一个操作值为数值，则通过Number()函数将字符串转换为数值\n（3）如果一个操作值是对象，另一个不是，则调用对象的valueOf()方法，得到的结果按照前面的规则进行比较\n（4）null与undefined是相等的\n（5）如果一个操作值为NaN，则相等比较返回false\n（6）如果两个操作值都是对象，则比较它们是不是指向同一个对象")])])]),n._v(" "),t("h5",{attrs:{id:"总结来说"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结来说"}},[n._v("#")]),n._v(" 总结来说")]),n._v(" "),t("ul",[t("li",[n._v("1.false 、 0、  '' 、 [] 是相等的")]),n._v(" "),t("li",[n._v("2.null、undefined 是相等的，且等于自身")]),n._v(" "),t("li",[t("ol",{attrs:{start:"3"}},[t("li",[n._v("NaN、{} 和什么的都不相等，自己跟自己都不相等")])])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("NaN == NaN  //false\nNaN == undefined //false\nNaN == false //false\nNaN == null //false\nNaN==[]  //false\nNaN==''  //false\nNaN=={}  //false\n\nfalse == false  //true\nfalse == undefined  //false\nfalse == null  //false\nfalse == []  //true\nfalse == {}  //false\nfalse == ''  //true\n\nundefined == undefined //true\nundefined == null  //true\nundefined == false //false\nundefined == [] //false\nundefined == {}  //false\nundefined == '' //false\n\nnull == null   //true\nnull == NaN  //false  \nnull == []  //false\nnull == {}  //false\nnull == undefined  //true\n\n0==false    //true   \n0 == []  //true\n0 == {}  //false\n0 == null  //false\n0 == undefined //false\n0 == '' //true\n0 == NaN //false\n\nfalse == []  //true\nfalse == {}  //false\nfalse == null  //false\nfalse == undefined  //false\nfalse == ''  //true\nfalse == NaN  //false\n\n[]=={} //false\n\nBoolean([])   //true\nBoolean({})   //true\nBoolean(null)  //false\nBoolean(NaN) //false\nBoolean(undefined)  //false\nBoolean('')  //false\nBoolean(0)  //false\n\nNumber(undefined)  //NaN\nNumber({})    //NaN\nNumber(NaN)  //NaN\nNumber('')  //0\nNumber([])    //0\nNumber(false)  //0\nNumber(null)  //0\n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br")])])])}),[],!1,null,null,null);t.default=s.exports}}]);