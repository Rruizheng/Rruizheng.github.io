(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{426:function(n,s,a){"use strict";a.r(s);var t=a(14),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"js执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js执行上下文"}},[n._v("#")]),n._v(" JS执行上下文")]),n._v(" "),s("h2",{attrs:{id:"执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[n._v("#")]),n._v(" 执行上下文")]),n._v(" "),s("ul",[s("li",[n._v("概念：JavaScript代码被解析和执行时所在的环境的抽象概念，JS运行任何代码都是在执行上下文中运行的")])]),n._v(" "),s("h3",{attrs:{id:"分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[n._v("#")]),n._v(" 分类")]),n._v(" "),s("ul",[s("li",[n._v("全局：默认的、最基础的执行上下文。不在任何函数中的代码都位于执行上下文中。浏览器的window对象，this指针指向这个全局对象，一个程序中只能有一个全局执行上下文")]),n._v(" "),s("li",[n._v("函数：每次调用函数，会为该函数创建一个新的执行上下文，函数调用时被创建，一个程序可以有任意数量的函数上下文。")]),n._v(" "),s("li",[n._v("Eval函数：运行在eval函数中的代码，有自己的上下文")])]),n._v(" "),s("h3",{attrs:{id:"执行栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[n._v("#")]),n._v(" 执行栈")]),n._v(" "),s("ul",[s("li",[n._v("概念：调用栈，后进先出，储存在代码执行期间创建的所有执行上下文")]),n._v(" "),s("li",[n._v("JS引擎管理执行上下文，先将全局上下文放进执行栈中，调用某个函数，再将函数放入，执行完毕的弹出")])]),n._v(" "),s("h3",{attrs:{id:"创建执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建执行上下文"}},[n._v("#")]),n._v(" 创建执行上下文")]),n._v(" "),s("ol",[s("li",[n._v("确定this的值：This Binding")]),n._v(" "),s("li",[n._v("LexicalEnvironment(词法环境)组件创建")]),n._v(" "),s("li",[n._v("VariableEnvironment(变量环境)组件创建")])]),n._v(" "),s("h4",{attrs:{id:"this的指向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this的指向"}},[n._v("#")]),n._v(" this的指向")]),n._v(" "),s("ul",[s("li",[n._v("全局环境：window对象")]),n._v(" "),s("li",[n._v("函数\n"),s("ul",[s("li",[n._v("函数被对象调用：该对象")]),n._v(" "),s("li",[n._v("函数直接执行，this为全局对象或者undefined(严格模式)")])])])]),n._v(" "),s("h3",{attrs:{id:"词法环境-lexicalenvironment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法环境-lexicalenvironment"}},[n._v("#")]),n._v(" 词法环境 LexicalEnvironment")]),n._v(" "),s("ul",[s("li",[n._v("ES6文档定义")])]),n._v(" "),s("blockquote",[s("p",[n._v("词法环境是一种规范类型，基于 ECMAScript 代码的词法嵌套结构来定义标识符与特定变量和函数的关联关系。词法环境由环境记录（environment record）和可能为空引用（null）的外部词法环境组成。")])]),n._v(" "),s("ul",[s("li",[n._v("组成\n"),s("ul",[s("li",[s("ol",[s("li",[n._v("环境记录")])])]),n._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[n._v("对外部环境的引用")])])])])]),n._v(" "),s("li",[n._v("分类\n"),s("ul",[s("li",[n._v("全局环境\n"),s("ul",[s("li",[n._v("在全局执行上下文中）是一个没有外部环境的词法环境。全局环境的外部环境引用为 null。它拥有一个全局对象（window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量，this 的值指向这个全局对象。")])])]),n._v(" "),s("li",[n._v("函数环境\n"),s("ul",[s("li",[n._v("用户在函数中定义的变量被存储在环境记录中。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。")])])])])]),n._v(" "),s("li",[n._v("注意： 对于函数环境而言，环境记录 还包含了一个 arguments 对象，该对象包含了索引和传递给函数的参数之间的映射以及传递给函数的参数的长度（数量）。例如，下面函数的 arguments 对象如下所示：")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function foo(a, b) {  \n  var c = a + b;  \n}  \nfoo(2, 3);\n\n// arguments 对象  \nArguments: {0: 2, 1: 3, length: 2},\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("h5",{attrs:{id:"环境记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境记录"}},[n._v("#")]),n._v(" 环境记录")]),n._v(" "),s("ul",[s("li",[n._v("概念：存储变量和函数声明的实际位置")]),n._v(" "),s("li",[n._v("分类\n"),s("ul",[s("li",[n._v("声明性环境记录：存储变量、函数和参数。一个函数环境包含声明性环境记录。")]),n._v(" "),s("li",[n._v("对象环境记录：用于定义在全局执行上下文中出现的变量和函数的关联。全局环境包含对象环境记录。")])])])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('GlobalExectionContext = {  \n  LexicalEnvironment: {  \n    EnvironmentRecord: {  \n      Type: "Object",  \n      // 标识符绑定在这里 \n    outer: <null>  \n  }  \n}\n\nFunctionExectionContext = {  \n  LexicalEnvironment: {  \n    EnvironmentRecord: {  \n      Type: "Declarative",  \n      // 标识符绑定在这里 \n    outer: <Global or outer function environment reference>  \n  }  \n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br")])]),s("h4",{attrs:{id:"变量环境-variableenvironment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量环境-variableenvironment"}},[n._v("#")]),n._v(" 变量环境 VariableEnvironment")]),n._v(" "),s("ul",[s("li",[n._v("它也是一个词法环境，其 EnvironmentRecord 包含了由 VariableStatements 在此执行上下文创建的绑定。")]),n._v(" "),s("li",[n._v("在 ES6 中，LexicalEnvironment 组件和 VariableEnvironment 组件的区别在于前者用于存储函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）绑定")])]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let a = 20;  \nconst b = 30;  \nvar c;\n\nfunction multiply(e, f) {  \n var g = 20;  \n return e * f * g;  \n}\n\nc = multiply(20, 30);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('// 全局执行上下文\nGlobalExectionContext = {\n    ThisBinding: <Global Object>,\n    LexicalEnvironment: { // let & const\n        EnvironmentRecord: {\n            Type: "Object",\n            // 标识符绑定在这里  \n            a: < uninitialized >,  \n            b: < uninitialized >, \n            multiply: < func > \n        },\n        outer: <null>\n    },\n    VariableEnvironment: { // var 变量\n        EnvironmentRecord: {\n            Type: "Object",\n            c: undefined, \n        },\n        outer: <null>\n    }\n}\n\n// 函数执行上下文\nFunctionExectionContext = {\n    ThisBinding: <Global Object>,\n    LexicalEnvironment: { // let & const\n        EnvironmentRecord: {\n            Type: "Declarative",\n            // 标识符绑定在这里  \n            Arguments: {0: 20, 1: 30, length: 2},  \n        },\n        outer: <GlobalLexicalEnvironment> // 全局环境\n    },\n    VariableEnvironment: { // var 变量\n        EnvironmentRecord: {\n            Type: "Declarative",\n            // 标识符绑定在这里  \n            g: undefined  \n        },\n        outer: <GlobalLexicalEnvironment> // 全局环境\n    }\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br")])]),s("ul",[s("li",[n._v("let 和 const 定义的变量没有任何与之关联的值")]),n._v(" "),s("li",[n._v("var 定义的变量设置为 undefined。")]),n._v(" "),s("li",[n._v("这是因为在创建阶段，代码会被扫描并解析变量和函数声明，其中函数声明存储在环境中，而变量会被设置为 undefined（在 var 的情况下）或保持未初始化（在 let 和 const 的情况下）。")]),n._v(" "),s("li",[n._v("这就是为什么你可以在声明之前访问 var 定义的变量（尽管是 undefined ），但如果在声明之前访问 let 和 const 定义的变量就会提示引用错误的原因。")]),n._v(" "),s("li",[n._v("这就是我们所谓的变量提升。")])]),n._v(" "),s("h3",{attrs:{id:"执行阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段"}},[n._v("#")]),n._v(" 执行阶段")]),n._v(" "),s("p",[n._v("这是整篇文章中最简单的部分。在此阶段，完成对所有变量的分配，最后执行代码。")]),n._v(" "),s("p",[n._v("注： 在执行阶段，如果 Javascript 引擎在源代码中声明的实际位置找不到 let 变量的值，那么将为其分配 undefined 值。")]),n._v(" "),s("h1",{attrs:{id:"this详细解读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this详细解读"}},[n._v("#")]),n._v(" this详细解读")]),n._v(" "),s("p",[n._v("在正式阅读之前，你需要知道this的5种绑定方式：")]),n._v(" "),s("p",[n._v("默认绑定(非严格模式下this指向全局对象, 严格模式下this会绑定到undefined)\n隐式绑定(当函数引用有上下文对象时, 如 obj.foo()的调用方式, foo内的this指向obj)\n显示绑定(通过call()或者apply()方法直接指定this的绑定对象, 如foo.call(obj))\nnew绑定\n箭头函数绑定(this的指向由外层作用域决定的)")])])}),[],!1,null,null,null);s.default=e.exports}}]);