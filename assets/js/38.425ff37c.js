(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{384:function(v,_,a){"use strict";a.r(_);var t=a(14),r=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"代码规范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码规范"}},[v._v("#")]),v._v(" 代码规范")]),v._v(" "),_("p",[v._v("一个程序员的“美德”就在于他是否能为后人留下一段看得懂、可维护性好的代码。")]),v._v(" "),_("h2",{attrs:{id:"代码规则的意义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码规则的意义"}},[v._v("#")]),v._v(" 代码规则的意义")]),v._v(" "),_("p",[v._v("● 认知成本")]),v._v(" "),_("p",[v._v("● 混乱的代码")]),v._v(" "),_("p",[v._v("● 架构的规范")]),v._v(" "),_("p",[v._v("● 避免破窗效应")]),v._v(" "),_("p",[v._v("规范对于架构来说⾄关重要。 从某种意义上来说，架构就是⼀组约束，遵从了这些约束，才能符 合架构要求；反之，架构将失去意义。")]),v._v(" "),_("h2",{attrs:{id:"命名规则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命名规则"}},[v._v("#")]),v._v(" 命名规则")]),v._v(" "),_("p",[v._v("在计算机科学中有两件难事：缓存失效和命名。")]),v._v(" "),_("p",[v._v("起⼀个好名字应该很难，因为⼀个好名字需要把要义浓缩在⼀到两个词中")]),v._v(" "),_("h3",{attrs:{id:"命名规则-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命名规则-2"}},[v._v("#")]),v._v(" 命名规则")]),v._v(" "),_("p",[v._v("• 驼峰命令法(CamelCase)：例如：“myName”")]),v._v(" "),_("p",[v._v("函数名中的每⼀个逻辑断点都有⼀个⼤写字⺟来标记。")]),v._v(" "),_("p",[v._v("• 帕斯卡命名法（PascalCase）：例如：“MyName” ⼤驼峰命名法。 每个单词的第⼀个字⺟都⼤写。")]),v._v(" "),_("p",[v._v("• 匈⽛利命名法 标识符的名字以⼀个或者多个⼩写字⺟开头作为前缀； 前缀之后的是⾸字⺟⼤写的⼀个单词或多个单词组合，该单词要指明变量的⽤途")]),v._v(" "),_("h3",{attrs:{id:"变量名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#变量名"}},[v._v("#")]),v._v(" 变量名")]),v._v(" "),_("p",[v._v("变量名应该是名词，能够正 确地描述业务，有表达⼒。 果⼀个变量名需要注释来补 充说明，那么很可能说明命 名就有问题。")]),v._v(" "),_("h3",{attrs:{id:"函数名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数名"}},[v._v("#")]),v._v(" 函数名")]),v._v(" "),_("p",[v._v("函数命名要具体，空泛的命 名没有意义")]),v._v(" "),_("h3",{attrs:{id:"类名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类名"}},[v._v("#")]),v._v(" 类名")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("实体类: 承载了核⼼业务数据和核⼼业务逻辑，其命名要充分体现业务语义，并 在团队内达成共识，如Customer、Bank 和Employee等。")])]),v._v(" "),_("li",[_("p",[v._v("辅助类: 要能够通过后缀来体现功能。例 如，⽤来为Customer做控制路由的控制 类CustomerController、提供Customer 服务的服务类CustomerService、获取数 据存储的仓储类CustomerRepository。")])])]),v._v(" "),_("h3",{attrs:{id:"包名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#包名"}},[v._v("#")]),v._v(" 包名")]),v._v(" "),_("p",[v._v("包名应该能够反映⼀组类在 更⾼抽象层次上的联系。包 的命名要适中，不能太抽 象，也不能太具体，不然会 失去包⽤来限定范围的作 ⽤。")]),v._v(" "),_("h3",{attrs:{id:"模块名"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模块名"}},[v._v("#")]),v._v(" 模块名")]),v._v(" "),_("p",[v._v("⼀⽅⾯，其名称保证了模块 在仓库中的唯⼀性；\n另⼀⽅⾯，名称要反映模块 在系统中的职责。")]),v._v(" "),_("h2",{attrs:{id:"命名一致性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命名一致性"}},[v._v("#")]),v._v(" 命名⼀致性")]),v._v(" "),_("p",[v._v("保持命名的⼀致性，可以提⾼代码的可读性，从⽽简化复杂度。 因此，我们要⼩⼼选择命名，⼀旦选中，就要持续遵循，保证名称始终⼀致。")]),v._v(" "),_("h3",{attrs:{id:"每个概念对应一个词-并且一以贯之。"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#每个概念对应一个词-并且一以贯之。"}},[v._v("#")]),v._v(" 每个概念对应⼀个词，并且⼀以贯之。")]),v._v(" "),_("p",[v._v("例如，fetch、retrieve、get、find和query 都可以表示查询的意思，如果不加约定地 给多个类中的同种查询⽅法命名，你怎么 记得是哪个类中的哪个⽅法呢？同样，在 ⼀段代码中，同时存在manager、 controller和handler，会令⼈感到困惑。")]),v._v(" "),_("h3",{attrs:{id:"使用对仗词"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用对仗词"}},[v._v("#")]),v._v(" 使⽤对仗词")]),v._v(" "),_("h3",{attrs:{id:"后置限定词"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#后置限定词"}},[v._v("#")]),v._v(" 后置限定词")]),v._v(" "),_("p",[v._v("限定词：Total、Sum、Average、Max、Min")]),v._v(" "),_("p",[v._v("限定词作⽤：限定某个命名")]),v._v(" "),_("p",[v._v("规则：主要含义的部分前置，限定词加到名字的最后")]),v._v(" "),_("p",[v._v("例如：revenueTotal（总收⼊）、expenseTotal（总⽀出）、revenueAverage（平均收⼊）和 expenseAverage（平均⽀出）")]),v._v(" "),_("p",[v._v("避免同时在程序中使⽤totalRevenue和revenueTotal⽽产⽣的歧义")]),v._v(" "),_("h3",{attrs:{id:"统一业务语言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#统一业务语言"}},[v._v("#")]),v._v(" 统⼀业务语⾔")]),v._v(" "),_("h3",{attrs:{id:"统一技术语言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#统一技术语言"}},[v._v("#")]),v._v(" 统⼀技术语⾔")]),v._v(" "),_("h3",{attrs:{id:"小心注释"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小心注释"}},[v._v("#")]),v._v(" ⼩⼼注释")]),v._v(" "),_("p",[v._v("• 1．不要复述功能")]),v._v(" "),_("p",[v._v("• 2．要解释背后意图")]),v._v(" "),_("h3",{attrs:{id:"命名工具"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命名工具"}},[v._v("#")]),v._v(" 命名⼯具")]),v._v(" "),_("p",[v._v("• OnlineSearch\n• CODEIF")]),v._v(" "),_("h2",{attrs:{id:"js代码常见规范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js代码常见规范"}},[v._v("#")]),v._v(" JS代码常见规范")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("缩进和空格：")]),v._v(" "),_("ul",[_("li",[v._v("使用 2 或 4 个空格作为缩进。")]),v._v(" "),_("li",[v._v("在运算符周围和逗号后面使用空格。")]),v._v(" "),_("li",[v._v("在大括号前放置一个空格。")])])]),v._v(" "),_("li",[_("p",[v._v("命名规范：")]),v._v(" "),_("ul",[_("li",[v._v("使用驼峰命名法（camelCase）给变量、函数和方法命名。")]),v._v(" "),_("li",[v._v("使用大写驼峰命名法（PascalCase）给类和构造函数命名。")]),v._v(" "),_("li",[v._v("使用全大写字母和下划线（UPPER_CASE）命名常量。")])])]),v._v(" "),_("li",[_("p",[v._v("注释：")]),v._v(" "),_("ul",[_("li",[v._v("使用 // 或 /* ... */ 进行单行或多行注释。")]),v._v(" "),_("li",[v._v("在代码中使用注释解释关键代码段的用途。")])])]),v._v(" "),_("li",[_("p",[v._v("变量声明：")]),v._v(" "),_("ul",[_("li",[v._v("使用 let 或 const 来声明变量，避免使用 var。")]),v._v(" "),_("li",[v._v("使用 const 声明不会被重新赋值的变量。")]),v._v(" "),_("li",[v._v("在变量声明时立即初始化变量。")])])]),v._v(" "),_("li",[_("p",[v._v("函数：")]),v._v(" "),_("ul",[_("li",[v._v("使用函数表达式或箭头函数来定义函数。")]),v._v(" "),_("li",[v._v("在函数之间添加空行，以提高可读性。")]),v._v(" "),_("li",[v._v("使用函数参数的默认值来简化代码。")])])]),v._v(" "),_("li",[_("p",[v._v("字符串：")]),v._v(" "),_("ul",[_("li",[v._v("使用单引号或双引号来定义字符串。")]),v._v(" "),_("li",[v._v("在字符串拼接时使用模板字符串（使用反引号 `）。")])])]),v._v(" "),_("li",[_("p",[v._v("数组和对象：")]),v._v(" "),_("ul",[_("li",[v._v("对象和数组的键和值之间使用冒号分隔。")]),v._v(" "),_("li",[v._v("在对象和数组的末尾不要添加多余的逗号。")])])]),v._v(" "),_("li",[_("p",[v._v("条件语句和循环：")]),v._v(" "),_("ul",[_("li",[v._v("使用严格相等运算符（===）而不是相等运算符（==）。")]),v._v(" "),_("li",[v._v("在条件语句和循环中使用大括号，并在打开的括号前添加一个空格。")])])]),v._v(" "),_("li",[_("p",[v._v("错误处理：")]),v._v(" "),_("ul",[_("li",[v._v("使用 try-catch-finally 块来捕获和处理错误。")])])]),v._v(" "),_("li",[_("p",[v._v("模块化：")]),v._v(" "),_("ul",[_("li",[v._v("使用模块化的方式组织代码，使用 import 和 export 关键字导入和导出模块。")])])])]),v._v(" "),_("p",[v._v("这些是一些通用的 JavaScript 代码规范，可以帮助提高代码的可读性和维护性。当然，具体的规范还可以根据团队或项目的需求进行调整。")]),v._v(" "),_("h2",{attrs:{id:"css常见规范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#css常见规范"}},[v._v("#")]),v._v(" CSS常见规范")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("缩进和空格：")]),v._v(" "),_("ul",[_("li",[v._v("使用 2 或 4 个空格作为缩进。")]),v._v(" "),_("li",[v._v("在选择器和属性之间使用空格。")]),v._v(" "),_("li",[v._v("在属性值的冒号后面添加一个空格。")])])]),v._v(" "),_("li",[_("p",[v._v("命名规范：")]),v._v(" "),_("ul",[_("li",[v._v("选择器、属性和值都使用小写或驼峰方式")]),v._v(" "),_("li",[v._v("使用有意义的类名和 ID 名称，避免使用无意义的缩写。")]),v._v(" "),_("li",[v._v("使用连字符（-）作为多个单词之间的分隔符。")])])]),v._v(" "),_("li",[_("p",[v._v("属性声明顺序：")]),v._v(" "),_("ul",[_("li",[v._v("按照特定的顺序声明 CSS 属性，显示定位布局 -> 盒模型等自身属性 -> 变形类属性 -> 文本类及修饰类 -> 行为辅助类，例如：布局属性、盒模型属性、文本属性等。")]),v._v(" "),_("li",[v._v("将相关的属性分组，并使用空行分隔。")])])]),v._v(" "),_("li",[_("p",[v._v("不论是单独的样式表，还是合并后的样式表，内部结构都应该遵行基础样式->组件样式 -> 私有样式 -> 皮肤样式 的组合顺序。")])]),v._v(" "),_("li",[_("p",[v._v("媒体查询：")]),v._v(" "),_("ul",[_("li",[v._v("将媒体查询放在样式表的末尾，以避免覆盖其他样式。")]),v._v(" "),_("li",[v._v("使用媒体查询时，将相关规则包装在适当的媒体查询块中。")])])]),v._v(" "),_("li",[_("p",[v._v("项目内部约定特定的命名空间，例如：功能（function）(.f-)，布局（grid）(.g-)，动画（animition）(.a-)")])]),v._v(" "),_("li",[_("p",[v._v("其他常用约定")])])]),v._v(" "),_("ul",[_("li",[v._v("最后一个值也以分号结尾，如{ margin:0; padding:0; }；")]),v._v(" "),_("li",[v._v("省略值为 0 时的单位，如：0px、0em、0% 等值都缩写为 0；")]),v._v(" "),_("li",[v._v("使用单引号，或省略引号，如：content:'.';， background:url(bg.png);")]),v._v(" "),_("li",[v._v("注释格式：单行注释，多行注释，注释分隔线")])])])}),[],!1,null,null,null);_.default=r.exports}}]);