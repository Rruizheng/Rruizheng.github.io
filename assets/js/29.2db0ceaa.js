(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{298:function(s,a,e){s.exports=e.p+"assets/img/base1.63757e84.png"},299:function(s,a,e){s.exports=e.p+"assets/img/babel.7be9b48d.png"},395:function(s,a,e){"use strict";e.r(a);var n=e(14),t=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"babel基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel基础"}},[s._v("#")]),s._v(" Babel基础")]),s._v(" "),a("h2",{attrs:{id:"babel的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel的概念"}},[s._v("#")]),s._v(" Babel的概念")]),s._v(" "),a("ul",[a("li",[s._v("概念：JS的编译器")]),s._v(" "),a("li",[s._v("设计理念\n"),a("ul",[a("li",[s._v("可插拔")]),s._v(" "),a("li",[s._v("可调试")]),s._v(" "),a("li",[s._v("基于协定")])])]),s._v(" "),a("li",[s._v("架构：Babel 是一个使用 Lerna 构建的 Monorepo 风格的仓库，在其./packages目录下有 140 多个包\n"),a("img",{attrs:{src:e(298)}})])]),s._v(" "),a("h3",{attrs:{id:"需要babel的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要babel的原因"}},[s._v("#")]),s._v(" 需要Babel的原因")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("- 向后兼容：宿主环境（浏览器、NodeJs）无法第一时间支持最新的语言特性，需要对语言特性进行编译降级，以适配不同的环境\n- 将各种前端框架编译成JavaScript代码\n")])])]),a("h3",{attrs:{id:"babel的功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel的功能"}},[s._v("#")]),s._v(" Babel的功能")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("- 语法转换，指高级语法的降级\n- Polyfill特性的实现和接入（通过引入第三方 polyfill 模块，例如 core-js）\n- 源码转换（codemods），例如JSX\n")])])]),a("h3",{attrs:{id:"babel的工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel的工作原理"}},[s._v("#")]),s._v(" Babel的工作原理")]),s._v(" "),a("img",{staticStyle:{background:"white"},attrs:{src:e(299)}}),s._v("\n    1.解析：Babel首先会对JavaScript代码进行解析，生成抽象语法树（AST），以便更好地理解代码的结构和含义。\n    2.转换：Babel会对AST进行转换，将其中不被目标环境支持或需要变换的代码结构，例如新语法特色或全局API引入，转换成在目标环境中可以正常运行的代码。\n    3.生成：最终，Babel会利用改造过的AST，生成符合目标环境要求的JavaScript代码。\n"),a("h2",{attrs:{id:"babel的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel的配置"}},[s._v("#")]),s._v(" Babel的配置")]),s._v(" "),a("h3",{attrs:{id:"配置方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置方式"}},[s._v("#")]),s._v(" 配置方式")]),s._v(" "),a("p",[s._v("具体配置可以在 babel.config.js 或 .babelrc 文件中配置，也可以在package.json之中使用babel关键字直接编写。")]),s._v(" "),a("p",[s._v("其中 babel.config.js 是一个 Node 模块文件，而 .babelrc 是 JSON 格式的配置文件。")]),s._v(" "),a("ul",[a("li",[s._v("babel.config.js")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('module.exports = {\n    presets: ["@babel/preset-env"],\n    plugins: [\n        "@babel/plugin-transform-arrow-functions"\n    ],\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ul",[a("li",[s._v(".babelrc")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "presets": ["@babel/preset-env"],\n  "plugins": ["@babel/plugin-transform-arrow-functions"]\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("package.json")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "name": "my-package",\n  "version": "1.0.0",\n  "babel": {\n    "presets": [ ... ],\n    "plugins": [ ... ],\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"配置内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置内容"}},[s._v("#")]),s._v(" 配置内容")]),s._v(" "),a("p",[s._v("Babel 常用的配置内容")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1. presets：预设用于转换不同的 ECMAScript 版本或语法。\n\n2. plugins：插件用于提供其他的转换功能，例如转换 react、stage-x。\n\n3. env：为不同的环境配置不同的预设和插件，例如用不同的预设和插件在开发环境和生产环境中转换代码。\n\n4. include/exclude：设置指定文件需要或不需要转换。\n\n5. sourceType：指定 JavaScript 代码的来源类型是 `script` 还是 `module`。\n\n6. ignore：指定 Babel 忽略某些文件。\n\n7. overrides：为某些文件或文件夹设置不同的转换规则。\n\n8. comments：是否将原始代码中的注释也输出到转换后的代码中。\n\n9. sourceMaps：是否生成并输出源代码的 sourcemap。\n\n10. compact：生成的代码是否忽略多余空白字符和换行符。\n\n11. retainLines：是否在输出的代码中保留原始代码的行号。\n\n12. minified：是否对代码进行最小化压缩。\n\n13. copyFiles：是否在转译时将其他的文件或文件夹复制到输出的文件夹中。\n\n14. babelrcRoots：babel 在哪些目录下寻找 .babelrc 文件。\n\n15. overrides：为指定文件或目录设置不同的转换规则。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h3",{attrs:{id:"配置项合并优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置项合并优先级"}},[s._v("#")]),s._v(" 配置项合并优先级")]),s._v(" "),a("p",[s._v("当使用 Babel 进行代码转换时，会存在多个配置文件，例如 "),a("code",[s._v(".babelrc")]),s._v("，"),a("code",[s._v("babel.config.js")]),s._v(" 等。这些配置文件的优先级和合并规则是什么呢？")]),s._v(" "),a("h4",{attrs:{id:"babel配置加载顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel配置加载顺序"}},[s._v("#")]),s._v(" Babel配置加载顺序")]),s._v(" "),a("p",[s._v("加载顺序优先级：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("从命令行参数 "),a("code",[s._v("--config-file")]),s._v(" 和 "),a("code",[s._v("--extends")]),s._v(" 获取配置文件路径。")])]),s._v(" "),a("li",[a("p",[s._v("如果项目根目录下存在 "),a("code",[s._v("babel.config.js")]),s._v("，则加载该文件。")])]),s._v(" "),a("li",[a("p",[s._v("如果项目根目录下存在 "),a("code",[s._v(".babelrc")]),s._v(" 或者 "),a("code",[s._v(".babelrc.js")]),s._v(" 文件，则加载该文件。")])]),s._v(" "),a("li",[a("p",[s._v("如果本身没有任何选项或配置，则使用默认配置。")])])]),s._v(" "),a("h4",{attrs:{id:"babel配置项合并规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel配置项合并规则"}},[s._v("#")]),s._v(" Babel配置项合并规则")]),s._v(" "),a("ul",[a("li",[s._v("如果存在相同的配置选项，则后面的配置文件会覆盖前面的配置文件。例如，后面的 "),a("code",[s._v(".babelrc")]),s._v(" 文件中的配置会替换前面 "),a("code",[s._v(".babelrc")]),s._v(" 文件中的配置。")]),s._v(" "),a("li",[s._v("Presets（预设）和 plugins（插件）列表会被顺序合并，从而将所有的插件和预设组成一个列表。不能在插件中定义名称相同或名称插件，插件的配置项会始终被后面进行覆盖。")]),s._v(" "),a("li",[s._v("assumptions, parserOpts 和 generatorOpts, 对象被合并，而不是被替换。")])])])}),[],!1,null,null,null);a.default=t.exports}}]);