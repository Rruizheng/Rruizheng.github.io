(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{297:function(s,a,n){s.exports=n.p+"assets/img/result1.dc6a937b.png"},394:function(s,a,n){"use strict";n.r(a);var e=n(14),t=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"babel插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel插件"}},[s._v("#")]),s._v(" Babel插件")]),s._v(" "),a("h2",{attrs:{id:"babel插件机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel插件机制"}},[s._v("#")]),s._v(" Babel插件机制")]),s._v(" "),a("p",[s._v("插件通常是一些单一的功能模块，它们会在转换代码时对 AST（抽象语法树）进行操作，从而实现代码的转换。")]),s._v(" "),a("p",[s._v("Babel 可以很容易地通过插件机制进行扩展和自定义。")]),s._v(" "),a("h2",{attrs:{id:"ast解析流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast解析流程"}},[s._v("#")]),s._v(" AST解析流程")]),s._v(" "),a("ul",[a("li",[s._v("词法分析：源码经过词法分析（分词）产生token序列，可看作一个扁平的语法片段数组")]),s._v(" "),a("li",[s._v("语法分析：对token序列进行语法分析，这个阶段会使用token中的信息把它们转换成一个 AST 的表述结构")]),s._v(" "),a("li",[s._v("转换：转换步骤接收 AST 并对其进行遍历，在此过程中对节点进行添加、更新及移除等操作。 这是 Babel 或是其他编译器中最复杂的过程 同时也是插件将要介入工作的部分。")]),s._v(" "),a("li",[s._v("生成AST：深度优先遍历整个 AST，然后构建可以表示转换后代码的字符串")])]),s._v(" "),a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),a("h3",{attrs:{id:"visitors-访问者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#visitors-访问者"}},[s._v("#")]),s._v(" Visitors（访问者）")]),s._v(" "),a("ul",[a("li",[s._v("访问节点：进入一个节点，其实就是在访问节点。")]),s._v(" "),a("li",[s._v("访问者是一个用于 AST 遍历的跨语言的模式。 简单的说它们就是一个对象，定义了用于在一个树状结构中获取具体节点的方法。")]),s._v(" "),a("li",[s._v("在遍历节点的过程中，每个节点都会有"),a("code",[s._v("进入和退出")]),s._v("两次访问机会")]),s._v(" "),a("li",[s._v("示例: 把它用于遍历中时，每当在树中遇见一个 Identifier 的时候会调用 Identifier() 方法。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// Identifier() { ... } 是 Identifier: { enter() { ... } } 的简写形式。.\nconst MyVisitor = {\n  Identifier() {\n    console.log("Called!");\n  }\n};\n\nconst MyVisitor = {\n  Identifier: {\n    enter() {\n      console.log("Entered!");\n    },\n    exit() {\n      console.log("Exited!");\n    }\n  }\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h3",{attrs:{id:"paths-路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paths-路径"}},[s._v("#")]),s._v(" Paths（路径）")]),s._v(" "),a("ul",[a("li",[s._v("Path: 表示两个节点之间连接的对象。")]),s._v(" "),a("li",[s._v("路径对象包含添加、更新、移动和删除节点有关的其他很多方法")]),s._v(" "),a("li",[s._v("路径是一个节点在树中的位置以及关于该节点各种信息的响应式 Reactive 表示")]),s._v(" "),a("li",[s._v("示例：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  type: "FunctionDeclaration",\n  id: {\n    type: "Identifier",\n    name: "square"\n  },\n  ...\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("将子节点 Identifier 表示为一个路径（Path）的话，看起来是这样的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "parent": {\n    "type": "FunctionDeclaration",\n    "id": {...},\n    ....\n  },\n  "node": {\n    "type": "Identifier",\n    "name": "square"\n  }\n  ... // 该路径的其他数据\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"paths-in-visitors-存在于访问者中的路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paths-in-visitors-存在于访问者中的路径"}},[s._v("#")]),s._v(" Paths in Visitors（存在于访问者中的路径）")]),s._v(" "),a("ul",[a("li",[s._v("当你有一个 Identifier() 成员方法的访问者时，你实际上是在访问路径而非节点。")]),s._v(" "),a("li",[s._v("通过这种方式，你操作的就是节点的响应式表示（译注：即路径）而非节点本身。")])]),s._v(" "),a("h2",{attrs:{id:"核心库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心库"}},[s._v("#")]),s._v(" 核心库")]),s._v(" "),a("h3",{attrs:{id:"babel-core"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-core"}},[s._v("#")]),s._v(" @babel-core")]),s._v(" "),a("p",[s._v("包含 @babel/parser, @babel/traverse, @babel/generator，其中 parser 负责将源代码解析成 ast，traverse 向外提供遍历 ast 节点的能力，generator 负责根据变换后的 ast 生成目标代码。")]),s._v(" "),a("h3",{attrs:{id:"babel-traverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-traverse"}},[s._v("#")]),s._v(" @babel/traverse")]),s._v(" "),a("p",[s._v("Babel Traverse（遍历）模块维护了整棵树的状态，并且负责替换、移除和添加节点。")]),s._v(" "),a("h3",{attrs:{id:"babel-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-types"}},[s._v("#")]),s._v(" @babel/types")]),s._v(" "),a("p",[s._v("Babel Types模块是一个用于 AST 节点的 Lodash 式工具库，它包含了构造、验证以及变换 AST 节点的方法。")]),s._v(" "),a("h3",{attrs:{id:"babel-generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-generator"}},[s._v("#")]),s._v(" @babel/generator")]),s._v(" "),a("p",[s._v("Babel Generator模块是 Babel 的代码生成器，它读取AST并将其转换为代码和源码映射（sourcemaps）")]),s._v(" "),a("h3",{attrs:{id:"babel-template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-template"}},[s._v("#")]),s._v(" @babel/template")]),s._v(" "),a("p",[s._v("babel-template 是另一个虽然很小但却非常有用的模块。 它能让你编写字符串形式且带有占位符的代码来代替手动编码， 尤其是生成的大规模AST的时候。")]),s._v(" "),a("h2",{attrs:{id:"编写一个插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写一个插件"}},[s._v("#")]),s._v(" 编写一个插件")]),s._v(" "),a("ul",[a("li",[s._v("插件基础模板")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export default function({ types: t }) {\n  return {\n    visitor: {\n      // visitor contents\n    }\n  };\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("函数会接收当前的babel作为入参，由于会经常用到babel.types，所以可以通过对象解构来获取types({types:t}).在返回的对象中")]),s._v(" "),a("li",[s._v("visitor是这个插件的主要访问者，visitor里面有很多函数，每个函数都会接收两个参数path,state。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export default function({ types: t }) {\n  return {\n    visitor: {\n      Identifier(path, state) {},\n      ASTNodeTypeHere(path, state) {}\n    }\n  };\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"插件示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件示例"}},[s._v("#")]),s._v(" 插件示例")]),s._v(" "),a("h4",{attrs:{id:"栗子1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栗子1"}},[s._v("#")]),s._v(" 栗子1")]),s._v(" "),a("ul",[a("li",[s._v('将所有遇到的变量名都改为"Hello World!"')])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('module.exports = function({ types: t }) {\n  return {\n    visitor: {\n      Identifier(path) {\n        path.node.name = "Hello World!";\n      }\n    }\n  };\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h4",{attrs:{id:"栗子2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栗子2"}},[s._v("#")]),s._v(" 栗子2")]),s._v(" "),a("ul",[a("li",[s._v("去掉代码中的cosole\n首先查看语句console.log的AST解析结果")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("console.log('');\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:n(297),alt:"image.png"}})]),s._v(" "),a("ul",[a("li",[s._v("console的最近父节点是MemberExpression")]),s._v(" "),a("li",[s._v("在父节点中查找console语句")]),s._v(" "),a("li",[s._v("console.log属于ExpressionStatement，找到这句话的节点")]),s._v(" "),a("li",[s._v("删除这句话")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("module.exports = function ({ types: t }) {\n  return {\n    visitor: {\n      // console.log的最近父节点是MemberExpression\n      MemberExpression(path) { \n        // 查找console语句\n        if (!path.get('object').isIdentifier({ name: 'console' })) return;\n        // console.log属于ExpressionStatement，找到这句话的节点\n        const parent = path.findParent((path) => path.isExpressionStatement());\n        // 删除这句话\n        parent.remove();\n      }\n    }\n  };\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h4",{attrs:{id:"栗子3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栗子3"}},[s._v("#")]),s._v(" 栗子3")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-arrow-functions",target:"_blank",rel:"noopener noreferrer"}},[s._v("@babel/plugin-transform-arrow-functions"),a("OutboundLink")],1),s._v(" 源码")]),s._v(" "),a("li",[s._v("主要使用了path自带的isArrowFunctionExpression和arrowFunctionToExpression方法")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import { declare } from "@babel/helper-plugin-utils";\n\nexport interface Options {\n  spec?: boolean;\n}\n\nexport default declare((api, options: Options) => {\n  api.assertVersion(7);\n\n  const noNewArrows = api.assumption("noNewArrows") ?? !options.spec;\n\n  return {\n    name: "transform-arrow-functions",\n\n    visitor: {\n      ArrowFunctionExpression(path) {\n        // In some conversion cases, it may have already been converted to a function while this callback\n        // was queued up.\n        if (!path.isArrowFunctionExpression()) return;\n\n        if (process.env.BABEL_8_BREAKING) {\n          path.arrowFunctionToExpression({\n            // While other utils may be fine inserting other arrows to make more transforms possible,\n            // the arrow transform itself absolutely cannot insert new arrow functions.\n            allowInsertArrow: false,\n            noNewArrows,\n          });\n        } else {\n          path.arrowFunctionToExpression({\n            allowInsertArrow: false,\n            noNewArrows,\n\n            // This is only needed for backward compat with @babel/traverse <7.13.0\n            // @ts-ignore(Babel 7 vs Babel 8) Removed in Babel 8\n            specCompliant: !noNewArrows,\n          });\n        }\n      },\n    },\n  };\n});\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])]),a("h2",{attrs:{id:"使用插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用插件"}},[s._v("#")]),s._v(" 使用插件")]),s._v(" "),a("p",[s._v("使用Babel插件的基本步骤：")]),s._v(" "),a("ul",[a("li",[s._v("安装插件：使用npm或yarn安装需要的插件。")]),s._v(" "),a("li",[s._v("配置插件：在项目根目录下创建babel.config.js或者.babelrc文件，并进行相关插件的配置。")]),s._v(" "),a("li",[s._v("运行Babel：使用Babel将代码转换为目标版本。")])]),s._v(" "),a("p",[s._v("例如，实现以下代码的转换：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const a = () => {\n  console.log("Hello World!");\n};\n\nexport default a;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("可以通过添加一个 "),a("a",{attrs:{href:"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-arrow-functions",target:"_blank",rel:"noopener noreferrer"}},[s._v("@babel/plugin-transform-arrow-functions"),a("OutboundLink")],1),s._v(" 插件来将箭头函数转化为普通函数：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ npm install --save-dev @babel/plugin-transform-arrow-functions\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在.babelrc配置文件中添加以下内容：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "plugins": [\n    "@babel/plugin-transform-arrow-functions"\n  ]\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("然后运行 Babel 即可将代码转换为兼容旧版浏览器的代码。")]),s._v(" "),a("h3",{attrs:{id:"插件顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插件顺序"}},[s._v("#")]),s._v(" 插件顺序")]),s._v(" "),a("p",[s._v("如果两个转换插件都将处理“程序（Program）”的某个代码片段，则将根据转换插件或 preset 的排列顺序依次执行。")]),s._v(" "),a("ul",[a("li",[s._v("插件在 Presets 前运行。")]),s._v(" "),a("li",[s._v("插件顺序从前往后排列。")]),s._v(" "),a("li",[s._v("Preset 顺序是颠倒的（从后往前）。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('babel.config.json\n{\n  "plugins": ["A", "B"]\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("先执行 A，再执行 B。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "presets": ["A", "B"]\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("先执行 B，再执行 A。")])])}),[],!1,null,null,null);a.default=t.exports}}]);